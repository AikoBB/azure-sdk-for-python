parameters:
  rootFolder: '$(Build.SourcesDirectory)'

steps:
  # - pwsh: |
  #       . $(Build.SourcesDirectory)/eng/common/scripts/common.ps1

  #       if ($FindArtifactForApiReviewFn -and (Test-Path "Function:$FindArtifactForApiReviewFn"))
  #       {
  #           &$FindArtifactForApiReviewFn
  #       }
  #   displayName: 'Language Specific Certificate Trust'

  - pwsh: |
      Write-Host "##vso[task.setvariable variable=OriginalPath]$env:PATH"
    displayName: 'Store Path Value'

  - pwsh: |
      Write-Host "##vso[task.setvariable variable=ASPNETCORE_Kestrel__Certificates__Default__Path]$(Build.SourcesDirectory)/eng/common/testproxy/dotnet-devcert.pfx"
      Write-Host "##vso[task.setvariable variable=ASPNETCORE_Kestrel__Certificates__Default__Password]password"
    displayName: 'Configure Kestrel Environment Variables'

  - task: UseDotNet@2
    displayName: "Use .NET Core SDK"
    inputs:
      packageType: sdk
      version: 5.0.205

  - pwsh: |
      $toolLocation = "$(Build.BinariesDirectory)/test-proxy"

      dotnet tool install azure.sdk.tools.testproxy `
        --tool-path $toolLocation`
        --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json `
        --version 1.0.0-dev.20210811.2

      Write-Host "##vso[task.setvariable variable=TEST_PROXY_LOC]$toolLocation"
    displayName: "Install test-proxy"

  - pwsh: |
      if ($IsWindows) {
        Start-Process $(Build.BinariesDirectory)/test-proxy/test-proxy.exe `
          -ArgumentList "--storage-location '${{ parameters.rootFolder }}'" `
          -NoNewWindow -PassThru
      }
      else {
        Get-Location
        nohup $(Build.SourcesDirectory)/eng/common/testproxy/invoke-proxy.sh &
      }
    displayName: 'Run the testproxy via dotnet tool'
    workingDirectory: "${{ parameters.rootFolder }}"

  - pwsh: |
      cat nohup.out
    displayName: 'Check Progress'
    condition: and(succeeded(), ne(variables['Agent.OS'],'Windows_NT'))


  - pwsh: |
      Write-Host "##vso[task.setvariable variable=PATH]$(OriginalPath)"
    displayName: 'Restore .NET version by resetting path'